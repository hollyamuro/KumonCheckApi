#!/usr/bin/env node

/**
 * server主程式
 * @module bin/KumonCheckInApi
 */

"use strict";

/**
 * 主程式
 */
const main = () => {
		
	/**
	 * Module dependencies.
	 */

	const app = require("../app");
	const debug = require("debug")("KumonCheckINApi:server");
	const http = require("http");
	//const https = require("https");
	const config = require("../Config");
	const ciMethod = require("../ci_tools/CommonMethod");
	const batchMain = require("../batchs/BatchMain");

	/**
	 * Get port from environment and store in Express.
	 */

	// let port = normalizePort(process.env.PORT || "3000");
	let port = normalizePort(process.env.PORT || config[process.env.NODE_ENV].port );
	app.set("port", port);

	/**
	 * Create HTTP server.
	 */

	let server = http.createServer(app);
	// let server = {};
	// if(config[process.env.NODE_ENV].policy==="http"){
	// 	server = http.createServer(app);
	// }
	// else{

	// 	/*SSL*/
	// 	if(process.env.NODE_ENV === "production"){
	// 		let fs = require("fs");
	// 		let key = fs.readFileSync("ssl/KumonCheckINApiProd.pem");
	// 		let cert = fs.readFileSync("ssl/KumonCheckINApiProd.crt.pem");
	// 		let ca = fs.readFileSync("ssl/KumonCheckINApiProd.csr");
	// 		server = https.createServer({ key: key, cert: cert, ca: ca}, app);
	// 	}
	// 	else{

	// 		let fs = require("fs");
	// 		let key = fs.readFileSync("ssl/KumonCheckINApiDev.pem");
	// 		let cert = fs.readFileSync("ssl/KumonCheckINApiDev.crt.pem");
	// 		let ca = fs.readFileSync("ssl/KumonCheckINApiDev.csr");
	// 		server = https.createServer({ key: key, cert: cert, ca: ca}, app);
	// 	}

	// 	//[TODO: need fix this issue in the future]
	// 	/* Overcome the DEPTH_ZERO_SELF_SIGNED_CERT  */
	// 	process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
	// }

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on("error", onError);
	server.on("listening", onListening);

	/*Server started message */
	debug("\n"  +
	" * server: " + config[process.env.NODE_ENV].policy + "://localhost" + "\n" + 
	" * Port: " + app.get("port") + "\n" + 
	" * Mode: " + app.get("env") + "\n" +
	"Press Ctrl-C to terminate." );

	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
		let port = parseInt(val, 10);

		if (isNaN(port)) {
			// named pipe
			return val;
		}

		if (port >= 0) {
			// port number
			return port;
		}

		return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== "listen") {
			throw error;
		}

		let bind = typeof port === "string"
			? "Pipe " + port
			: "Port " + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		let addr = server.address();
		let bind = typeof addr === "string"
			? "pipe " + addr
			: "port " + addr.port;
		debug("Listening on " + bind);
	}

	//run forever
	ciMethod.foreverCheck();

	//run batch
	batchMain();

};

main(); // run main
